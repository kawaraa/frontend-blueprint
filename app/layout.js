import { cookies } from "next/headers";
import { Geist, Geist_Mono } from "next/font/google";
import localFont from "next/font/local";
import { Suspense } from "react";
import { getBrowserLanguage, getSupportedLanguage } from "@/util/get-browser-language";
import getMetadata from "./metadata";
import { StateProvider } from "./state";
import Navigation from "@/component/navigation";
import Footer from "@/component/footer copy";
import "./globals.css";

const geistSans = Geist({ variable: "--font-geist-sans", subsets: ["latin"] });
const geistMono = Geist_Mono({ variable: "--font-geist-mono", subsets: ["latin"] });
const kufiFont = localFont({ src: "../public/font/NotoKufiArabic-VariableFont_wght.ttf", display: "swap" });

export default async function RootLayout({ children, params, searchParams }) {
  const cookieStore = await cookies();
  const themeMode = cookieStore.get("themeMode")?.value || "auto";
  const lang = getSupportedLanguage(
    (await params).lang ||
      (await searchParams)?.lang ||
      (children?.props?.childProp?.segment || [])[1] ||
      cookieStore.get("lang")?.value ||
      getBrowserLanguage("ar")
  );

  return (
    <html translate="no" lang="en" className={`scroll-smooth ${themeMode}`}>
      <body
        className={`${
          lang == "ar" ? kufiFont.className : geistSans.variable + " " + geistMono.variable
        } antialiased bg-neutral-50 text-slate-700 selection:bg-teal-300 dark:bg-black dark:text-gray-300 dark:selection:bg-pink-500 dark:selection:text-white`}
      >
        <Suspense>
          <StateProvider>
            <Navigation lang={lang} />

            <main className="min-h-screen pt-10 pb-24 px-1 sm:px-2 md:px-4 print:min-h-fit" dir="auto">
              {children}
            </main>

            <Footer />
          </StateProvider>
        </Suspense>
      </body>
    </html>
  );
}

export async function generateMetadata({ params, searchParams }) {
  const cookieStore = await cookies();
  const lang = getSupportedLanguage(
    (await params).lang ||
      (await searchParams)?.lang ||
      cookieStore.get("lang")?.value ||
      getBrowserLanguage("ar")
  );
  return getMetadata({ lang });
}

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export const viewport = {
  themeColor: "#fafafa",
  themeColor: [
    { media: "(prefers-color-scheme: light)", color: "#fafafa" },
    { media: "(prefers-color-scheme: dark)", color: "#000000" },
  ],
  colorScheme: "light dark",
};
