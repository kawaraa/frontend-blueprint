import { cookies } from "next/headers";
// import { Geist, Geist_Mono } from "next/font/google";
import localFont from "next/font/local";
import { Suspense } from "react";
import { getSupportedLanguage } from "@/util/get-browser-language";
import getMetadata from "./metadata";
import { RootStateProvider } from "./state";
import Navigation from "@/component/navigation";
import Footer from "@/component/footer";
import "./globals.css";

// const geistSans = Geist({ variable: "--font-geist-sans", subsets: ["latin"] });
// const geistMono = Geist_Mono({ variable: "--font-geist-mono", subsets: ["latin"] });
const kufiFont = localFont({ src: "../public/font/NotoKufiArabic-VariableFont_wght.ttf", display: "swap" });

export default async function RootLayout({ children, params, searchParams }) {
  const cookieStore = await cookies();
  const themeMode = cookieStore.get("themeMode")?.value || "auto";
  const lang = getSupportedLanguage(
    (await params).lang ||
      (await searchParams)?.lang ||
      (children?.props?.childProp?.segment || [])[1] ||
      cookieStore.get("lang")?.value
  );

  return (
    <html translate="no" lang="en" className={`scroll-smooth ${themeMode}`}>
      {/* bg-neutral-50 text-slate-700 dark:bg-black dark:text-gray-300 */}
      <body
        className={`${kufiFont.className} min-h-screen flex flex-col antialiased selection:bg-teal-300 dark:selection:bg-pink-500 dark:selection:text-white text-gray-600 dark:text-gray-400`}
      >
        <Suspense>
          <RootStateProvider lang={lang}>
            <header></header>

            <Navigation lang={lang || "en"} />

            <main
              className="flex-auto pt-10 pb-24 px-1 sm:px-2 md:px-4 flex flex-col gap-[32px] justify-start items-center sm:justify-center"
              dir="auto"
            >
              {children}
            </main>

            <Footer lang={lang || "en"} />
          </RootStateProvider>
        </Suspense>
      </body>
    </html>
  );
}

export async function generateMetadata({ params, searchParams }) {
  const cookieStore = await cookies();
  const lang = getSupportedLanguage(
    (await params).lang || (await searchParams)?.lang || cookieStore.get("lang")?.value || "en"
  );
  return getMetadata({ lang });
}

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export const viewport = {
  themeColor: "#fafafa",
  themeColor: [
    { media: "(prefers-color-scheme: light)", color: "#fafafa" },
    { media: "(prefers-color-scheme: dark)", color: "#000000" },
  ],
  colorScheme: "light dark",
};
